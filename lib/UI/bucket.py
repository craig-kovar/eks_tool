#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Oct 29, 2019 03:32:23 PM CDT  platform: Darwin

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from lib.configurations.CBClusterConfig import CBClusterBucket


class BucketTopLevel:
    def __init__(self, master, bucket):
        self.master = master
        top = self.top = tk.Toplevel(master)
        if bucket is None:
            self.bucket = CBClusterBucket()
        else:
            self.bucket = CBClusterBucket()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("348x339+-1362+254")
        top.title("Bucket")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label_Name = tk.Label(top)
        self.Label_Name.place(relx=0.029, rely=0.088, height=22, width=111)
        self.Label_Name.configure(activebackground="#f9f9f9")
        self.Label_Name.configure(activeforeground="black")
        self.Label_Name.configure(anchor='w')
        self.Label_Name.configure(background="#d9d9d9")
        self.Label_Name.configure(foreground="#000000")
        self.Label_Name.configure(highlightbackground="#d9d9d9")
        self.Label_Name.configure(highlightcolor="black")
        self.Label_Name.configure(text='''Bucket Name''')

        self.Label_Quota = tk.Label(top)
        self.Label_Quota.place(relx=0.029, rely=0.265, height=22, width=111)
        self.Label_Quota.configure(activebackground="#f9f9f9")
        self.Label_Quota.configure(activeforeground="black")
        self.Label_Quota.configure(anchor='w')
        self.Label_Quota.configure(background="#d9d9d9")
        self.Label_Quota.configure(foreground="#000000")
        self.Label_Quota.configure(highlightbackground="#d9d9d9")
        self.Label_Quota.configure(highlightcolor="black")
        self.Label_Quota.configure(text='''Memory Quota''')

        self.Label_Type = tk.Label(top)
        self.Label_Type.place(relx=0.029, rely=0.177, height=22, width=111)
        self.Label_Type.configure(activebackground="#f9f9f9")
        self.Label_Type.configure(activeforeground="black")
        self.Label_Type.configure(anchor='w')
        self.Label_Type.configure(background="#d9d9d9")
        self.Label_Type.configure(foreground="#000000")
        self.Label_Type.configure(highlightbackground="#d9d9d9")
        self.Label_Type.configure(highlightcolor="black")
        self.Label_Type.configure(text='''Bucket Type''')

        self.Label_Replicas = tk.Label(top)
        self.Label_Replicas.place(relx=0.029, rely=0.354, height=22, width=111)
        self.Label_Replicas.configure(activebackground="#f9f9f9")
        self.Label_Replicas.configure(activeforeground="black")
        self.Label_Replicas.configure(anchor='w')
        self.Label_Replicas.configure(background="#d9d9d9")
        self.Label_Replicas.configure(foreground="#000000")
        self.Label_Replicas.configure(highlightbackground="#d9d9d9")
        self.Label_Replicas.configure(highlightcolor="black")
        self.Label_Replicas.configure(text='''Replicas''')

        self.Label_IO = tk.Label(top)
        self.Label_IO.place(relx=0.029, rely=0.442, height=22, width=111)
        self.Label_IO.configure(activebackground="#f9f9f9")
        self.Label_IO.configure(activeforeground="black")
        self.Label_IO.configure(anchor='w')
        self.Label_IO.configure(background="#d9d9d9")
        self.Label_IO.configure(foreground="#000000")
        self.Label_IO.configure(highlightbackground="#d9d9d9")
        self.Label_IO.configure(highlightcolor="black")
        self.Label_IO.configure(text='''IO Priority''')

        self.Label_Eviction = tk.Label(top)
        self.Label_Eviction.place(relx=0.029, rely=0.531, height=22, width=111)
        self.Label_Eviction.configure(activebackground="#f9f9f9")
        self.Label_Eviction.configure(activeforeground="black")
        self.Label_Eviction.configure(anchor='w')
        self.Label_Eviction.configure(background="#d9d9d9")
        self.Label_Eviction.configure(foreground="#000000")
        self.Label_Eviction.configure(highlightbackground="#d9d9d9")
        self.Label_Eviction.configure(highlightcolor="black")
        self.Label_Eviction.configure(text='''Eviction Policy''')

        self.Label_Conflict = tk.Label(top)
        self.Label_Conflict.place(relx=0.029, rely=0.619, height=22, width=131)
        self.Label_Conflict.configure(activebackground="#f9f9f9")
        self.Label_Conflict.configure(activeforeground="black")
        self.Label_Conflict.configure(anchor='w')
        self.Label_Conflict.configure(background="#d9d9d9")
        self.Label_Conflict.configure(foreground="#000000")
        self.Label_Conflict.configure(highlightbackground="#d9d9d9")
        self.Label_Conflict.configure(highlightcolor="black")
        self.Label_Conflict.configure(text='''Conflict Resolution''')

        self.Label_Flush = tk.Label(top)
        self.Label_Flush.place(relx=0.029, rely=0.708, height=22, width=111)
        self.Label_Flush.configure(activebackground="#f9f9f9")
        self.Label_Flush.configure(activeforeground="black")
        self.Label_Flush.configure(anchor='w')
        self.Label_Flush.configure(background="#d9d9d9")
        self.Label_Flush.configure(foreground="#000000")
        self.Label_Flush.configure(highlightbackground="#d9d9d9")
        self.Label_Flush.configure(highlightcolor="black")
        self.Label_Flush.configure(text='''Enable Flush''')

        self.TEntry_Bucket = ttk.Entry(top)
        self.TEntry_Bucket.place(relx=0.431, rely=0.088, relheight=0.077
                , relwidth=0.546)
        self.TEntry_Bucket.configure(takefocus="")
        self.TEntry_Bucket.configure(cursor="ibeam")

        self.bucket_cbox = tk.StringVar()
        self.TCombobox_Bucket = ttk.Combobox(top)
        self.TCombobox_Bucket.place(relx=0.431, rely=0.177, relheight=0.08
                , relwidth=0.506)
        self.TCombobox_Bucket.configure(textvariable=self.bucket_cbox)
        self.TCombobox_Bucket.configure(takefocus="")
        self.bucket_type = ["couchbase", "ephemeral", "memcached"]
        self.TCombobox_Bucket.configure(values=self.bucket_type)
        self.TCombobox_Bucket.current(0)

        self.TEntry_Quota = ttk.Entry(top)
        self.TEntry_Quota.place(relx=0.431, rely=0.265, relheight=0.077
                , relwidth=0.546)
        self.TEntry_Quota.configure(takefocus="")
        self.TEntry_Quota.configure(cursor="ibeam")
        self.TEntry_Quota.insert(0, self.bucket.memoryQuota)

        self.replica_cbox = tk.StringVar()
        self.TCombobox_Replicas = ttk.Combobox(top)
        self.TCombobox_Replicas.place(relx=0.431, rely=0.354, relheight=0.08
                , relwidth=0.506)
        self.TCombobox_Replicas.configure(textvariable=self.replica_cbox)
        self.TCombobox_Replicas.configure(takefocus="")
        self.replica_list = ["0", "1", "2", "3"]
        self.TCombobox_Replicas.configure(values=self.replica_list)
        self.TCombobox_Replicas.current(1)

        self.io_cbox = tk.StringVar()
        self.TCombobox_IO = ttk.Combobox(top)
        self.TCombobox_IO.place(relx=0.431, rely=0.442, relheight=0.08
                , relwidth=0.506)
        self.TCombobox_IO.configure(textvariable=self.io_cbox)
        self.TCombobox_IO.configure(takefocus="")
        self.io_list = ["high", "low"]
        self.TCombobox_IO.configure(values=self.io_list)
        self.TCombobox_IO.current(1)

        self.eviction_cbox = tk.StringVar()
        self.TCombobox_Eviction = ttk.Combobox(top)
        self.TCombobox_Eviction.place(relx=0.431, rely=0.531, relheight=0.08
                , relwidth=0.506)
        self.TCombobox_Eviction.configure(textvariable=self.eviction_cbox)
        self.TCombobox_Eviction.configure(takefocus="")
        self.eviction_list = ["valueOnly", "fullEviction"]
        self.TCombobox_Eviction.configure(values=self.eviction_list)
        self.TCombobox_Eviction.current(0)

        self.conflict_cbox = tk.StringVar()
        self.TCombobox_Conflict = ttk.Combobox(top)
        self.TCombobox_Conflict.place(relx=0.431, rely=0.619, relheight=0.08
                , relwidth=0.506)
        self.TCombobox_Conflict.configure(textvariable=self.conflict_cbox)
        self.TCombobox_Conflict.configure(takefocus="")
        self.conflict_list = ["seqno", "lww"]
        self.TCombobox_Conflict.configure(values=self.conflict_list)
        self.TCombobox_Conflict.current(0)

        self.flush = tk.IntVar(value=0)
        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton_Flush = ttk.Checkbutton(top)
        self.TCheckbutton_Flush.place(relx=0.431, rely=0.708, relwidth=0.072
                , relheight=0.0, height=22)
        self.TCheckbutton_Flush.configure(variable=self.flush)
        self.TCheckbutton_Flush.configure(takefocus="")

        self.TButton_OK = ttk.Button(top)
        self.TButton_OK.place(relx=0.374, rely=0.885, height=24, width=87)
        self.TButton_OK.configure(command=lambda: self.on_ok())
        self.TButton_OK.configure(takefocus="")
        self.TButton_OK.configure(text='''OK''')

        self.TButton_Cancel = ttk.Button(top)
        self.TButton_Cancel.place(relx=0.69, rely=0.885, height=24, width=87)
        self.TButton_Cancel.configure(command=lambda: self.on_cancel())
        self.TButton_Cancel.configure(takefocus="")
        self.TButton_Cancel.configure(text='''cancel''')

    def cleanup(self):
        self.top.destroy()

    def show(self):
        self.top.wait_window()
        return self.bucket

    def on_ok(self):
        self.bucket.name = self.TEntry_Bucket.get()
        self.bucket.type = self.TCombobox_Bucket.get()
        self.bucket.memoryQuota = self.TEntry_Quota.get()
        self.bucket.replicas = self.TCombobox_Replicas.get()
        self.bucket.ioPriority = self.TCombobox_IO.get()
        self.bucket.evictionPolicy = self.TCombobox_Eviction.get()
        self.bucket.conflictResolution = self.TCombobox_Conflict.get()
        if self.flush.get() == 1:
            self.bucket.enableFlush = "true"
        else:
            self.bucket.enableFlush = "false"

        self.cleanup()

    def on_cancel(self):
        self.bucket = None
        self.cleanup()




