#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Oct 24, 2019 10:20:49 AM CDT  platform: Darwin

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

#import lib.UI.WrkNode_support as WrkNode_support
from lib.cloud.aws_worker_node_config import aws_worker_node_config
import lib.cloud.ICloudUtils as cloud
from lib.UI.popup import PopupWindow as dialog
import lib.utils.ekstool_utils as utils


class WrkNodeTop:
    def __init__(self, master, wrk_node):
        self.master = master
        top = self.top = tk.Toplevel(master)
        stack_name = "TestName-nodes"
        if wrk_node is None:
            self.wrk_node = aws_worker_node_config(stack_name)
        else:
            self.wrk_node = wrk_node
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("565x489+-1417+244")
        top.title("Worker Node Configuration")
        top.configure(background="#d9d9d9")

        self.LblWrkNode = tk.Label(top)
        self.LblWrkNode.place(relx=0.035, rely=0.041, height=32, width=171)
        self.LblWrkNode.configure(background="#d9d9d9")
        self.LblWrkNode.configure(foreground="#000000")
        self.LblWrkNode.configure(text='''Stack Name''')

        self.TEntry_Wrk_Name = ttk.Entry(top)
        self.TEntry_Wrk_Name.place(relx=0.389, rely=0.041, relheight=0.053
                , relwidth=0.336)
        self.TEntry_Wrk_Name.configure(takefocus="")
        self.TEntry_Wrk_Name.configure(cursor="ibeam")
        #self.TEntry_Wrk_Name.bind("<FocusOut>", lambda e: self.update_names())
        self.TEntry_Wrk_Name.insert(0, stack_name)

        self.LblWrkDiskVolume = tk.Label(top)
        self.LblWrkDiskVolume.place(relx=0.035, rely=0.123, height=32, width=171)
        self.LblWrkDiskVolume.configure(activebackground="#f9f9f9")
        self.LblWrkDiskVolume.configure(activeforeground="black")
        self.LblWrkDiskVolume.configure(background="#d9d9d9")
        self.LblWrkDiskVolume.configure(foreground="#000000")
        self.LblWrkDiskVolume.configure(highlightbackground="#d9d9d9")
        self.LblWrkDiskVolume.configure(highlightcolor="black")
        self.LblWrkDiskVolume.configure(text='''Disk Volume Size''')

        self.TEntry_disk_volume = ttk.Entry(top)
        self.TEntry_disk_volume.place(relx=0.389, rely=0.123, relheight=0.053
                                      , relwidth=0.336)
        self.TEntry_disk_volume.configure(takefocus="")
        self.TEntry_disk_volume.configure(cursor="ibeam")
        self.TEntry_disk_volume.insert(0, self.wrk_node.get_volume_size())

        self.LblWrkNodeMin = tk.Label(top)
        self.LblWrkNodeMin.place(relx=0.035, rely=0.204, height=32, width=171)
        self.LblWrkNodeMin.configure(activebackground="#f9f9f9")
        self.LblWrkNodeMin.configure(activeforeground="black")
        self.LblWrkNodeMin.configure(background="#d9d9d9")
        self.LblWrkNodeMin.configure(foreground="#000000")
        self.LblWrkNodeMin.configure(highlightbackground="#d9d9d9")
        self.LblWrkNodeMin.configure(highlightcolor="black")
        self.LblWrkNodeMin.configure(text='''Minimum Nodes''')

        self.TEntry_Min = ttk.Entry(top)
        self.TEntry_Min.place(relx=0.389, rely=0.204, relheight=0.053
                , relwidth=0.336)
        self.TEntry_Min.configure(takefocus="")
        self.TEntry_Min.configure(cursor="ibeam")
        self.TEntry_Min.insert(0, self.wrk_node.get_group_min())

        self.LblWrkNodeMax = tk.Label(top)
        self.LblWrkNodeMax.place(relx=0.035, rely=0.286, height=32, width=171)
        self.LblWrkNodeMax.configure(activebackground="#f9f9f9")
        self.LblWrkNodeMax.configure(activeforeground="black")
        self.LblWrkNodeMax.configure(background="#d9d9d9")
        self.LblWrkNodeMax.configure(foreground="#000000")
        self.LblWrkNodeMax.configure(highlightbackground="#d9d9d9")
        self.LblWrkNodeMax.configure(highlightcolor="black")
        self.LblWrkNodeMax.configure(text='''Maximum Nodes''')

        self.TEntry_Max = ttk.Entry(top)
        self.TEntry_Max.place(relx=0.389, rely=0.286, relheight=0.053
                , relwidth=0.336)
        self.TEntry_Max.configure(takefocus="")
        self.TEntry_Max.configure(cursor="ibeam")
        self.TEntry_Max.insert(0, self.wrk_node.get_group_max())

        self.LblWrkNodeDesired = tk.Label(top)
        self.LblWrkNodeDesired.place(relx=0.035, rely=0.368, height=32
                , width=171)
        self.LblWrkNodeDesired.configure(activebackground="#f9f9f9")
        self.LblWrkNodeDesired.configure(activeforeground="black")
        self.LblWrkNodeDesired.configure(background="#d9d9d9")
        self.LblWrkNodeDesired.configure(foreground="#000000")
        self.LblWrkNodeDesired.configure(highlightbackground="#d9d9d9")
        self.LblWrkNodeDesired.configure(highlightcolor="black")
        self.LblWrkNodeDesired.configure(text='''Desired Nodes''')

        self.TEntry_Desired = ttk.Entry(top)
        self.TEntry_Desired.place(relx=0.389, rely=0.368, relheight=0.053
                , relwidth=0.336)
        self.TEntry_Desired.configure(takefocus="")
        self.TEntry_Desired.configure(cursor="ibeam")
        self.TEntry_Desired.insert(0, self.wrk_node.get_group_desired())

        self.LblWrkNodeInstance = tk.Label(top)
        self.LblWrkNodeInstance.place(relx=0.035, rely=0.45, height=32
                , width=171)
        self.LblWrkNodeInstance.configure(activebackground="#f9f9f9")
        self.LblWrkNodeInstance.configure(activeforeground="black")
        self.LblWrkNodeInstance.configure(background="#d9d9d9")
        self.LblWrkNodeInstance.configure(foreground="#000000")
        self.LblWrkNodeInstance.configure(highlightbackground="#d9d9d9")
        self.LblWrkNodeInstance.configure(highlightcolor="black")
        self.LblWrkNodeInstance.configure(text='''Instance Type''')

        self.TEntry_Instance = ttk.Entry(top)
        self.TEntry_Instance.place(relx=0.389, rely=0.45, relheight=0.053
                , relwidth=0.336)
        self.TEntry_Instance.configure(takefocus="")
        self.TEntry_Instance.configure(cursor="ibeam")
        self.TEntry_Instance.insert(0, self.wrk_node.get_instance_type())

        self.TButton_Instance = ttk.Button(top)
        self.TButton_Instance.place(relx=0.761, rely=0.45, height=24, width=120)
        self.TButton_Instance.configure(command=lambda: self.find_instance())
        self.TButton_Instance.configure(takefocus="")
        self.TButton_Instance.configure(text='''Find Instance''')

        self.TButton_Wrk_Label = ttk.Button(top)
        self.TButton_Wrk_Label.place(relx=0.442, rely=0.634, height=24, width=120)
        self.TButton_Wrk_Label.configure(command=lambda: self.add_label())
        self.TButton_Wrk_Label.configure(takefocus="")
        self.TButton_Wrk_Label.configure(text='''Add_Label''')

        self.TButton__Wrk_Ok = ttk.Button(top)
        self.TButton__Wrk_Ok.place(relx=0.478, rely=0.92, height=24, width=120)
        self.TButton__Wrk_Ok.configure(command=lambda: self.ok_click())
        self.TButton__Wrk_Ok.configure(takefocus="")
        self.TButton__Wrk_Ok.configure(text='''OK''')

        self.TButton_Cancel = ttk.Button(top)
        self.TButton_Cancel.place(relx=0.743, rely=0.92, height=24, width=120)
        self.TButton_Cancel.configure(command=lambda: self.cancel_click)
        self.TButton_Cancel.configure(takefocus="")
        self.TButton_Cancel.configure(text='''Cancel''')

        self.LblWrkNode_AMI = tk.Label(top)
        self.LblWrkNode_AMI.place(relx=0.035, rely=0.532, height=32, width=171)
        self.LblWrkNode_AMI.configure(activebackground="#f9f9f9")
        self.LblWrkNode_AMI.configure(activeforeground="black")
        self.LblWrkNode_AMI.configure(background="#d9d9d9")
        self.LblWrkNode_AMI.configure(foreground="#000000")
        self.LblWrkNode_AMI.configure(highlightbackground="#d9d9d9")
        self.LblWrkNode_AMI.configure(highlightcolor="black")
        self.LblWrkNode_AMI.configure(text='''Instance AMI''')

        self.LblWrkNode_Label = tk.Label(top)
        self.LblWrkNode_Label.place(relx=0.053, rely=0.716, height=100, width=471)
        self.LblWrkNode_Label.configure(activebackground="#f9f9f9")
        self.LblWrkNode_Label.configure(activeforeground="black")
        self.LblWrkNode_Label.configure(background="#d9d9d9")
        self.LblWrkNode_Label.configure(foreground="#000000")
        self.LblWrkNode_Label.configure(highlightbackground="#d9d9d9")
        self.LblWrkNode_Label.configure(highlightcolor="black")
        self.LblWrkNode_Label.configure(anchor='n')
        self.LblWrkNode_Label.configure(text='''Labels\n''')

        self.TEntry_AMI = ttk.Entry(top)
        self.TEntry_AMI.place(relx=0.389, rely=0.532, relheight=0.053
                , relwidth=0.336)
        self.TEntry_AMI.configure(takefocus="")
        self.TEntry_AMI.configure(cursor="ibeam")

        self.TButton_AMI = ttk.Button(top)
        self.TButton_AMI.place(relx=0.761, rely=0.532, height=24, width=120)
        self.TButton_AMI.configure(command=lambda: self.detect_ami())
        self.TButton_AMI.configure(takefocus="")
        self.TButton_AMI.configure(text='''Detect AMI''')

        self.TCombobox_Version = ttk.Combobox(top)
        self.TCombobox_Version.place(relx=0.779, rely=0.593, relheight=0.055
                , relwidth=0.188)
        self.value_list = ["1.11","1.12","1.13","1.14"]
        self.TCombobox_Version.configure(values=self.value_list)
        #self.TCombobox_Version.configure(textvariable=WrkNode_support.combobox)
        self.TCombobox_Version.configure(takefocus="")
        self.TCombobox_Version.configure(state="readonly")
        self.TCombobox_Version.current(1)

    def cleanup(self):
        self.top.destroy()

    def detect_ami(self):
        version = self.TCombobox_Version.get()
        if version is not None and len(version) >= 1:
            self.wrk_node.set_ami(cloud.get_ami_version(version))
            self.TEntry_AMI.delete(0, 'end')
            self.TEntry_AMI.insert(0, self.wrk_node.get_ami())

    def show(self):
        self.top.wait_window()
        return self.wrk_node

    def add_label(self):
        #print("Self add label method")
        #sys.stdout.flush()
        label = dialog(self.top, "Enter a label in form: <Name>=<Value>").show()
        if label is not None and len(label) > 1:
            label_parts = label.split("=")
            self.wrk_node.add_label(label_parts[0],label_parts[1])
            self.LblWrkNode_Label['text'] = self.LblWrkNode_Label['text'] + "{}\n".format(label)

    def cancel_click(self):
        #print('WrkNode_support.cancel_click')
        #sys.stdout.flush()
        self.wrk_node = None
        self.cleanup()

    def find_instance(self):
        print('WrkNode_support.find_instance')
        sys.stdout.flush()

    def ok_click(self):
        wrk_pass = True

        name = self.TEntry_Wrk_Name.get()
        if name is None or len(name) < 1:
            utils.write_error("Worker node stack name invalid [{}]".format(name))
            wrk_pass = False
        else:
            self.wrk_node.set_name(name)
            self.wrk_node.set_group_name("{}-eks-nodes".format(name))

        disk_volume = self.TEntry_disk_volume.get()
        if disk_volume is None or len(disk_volume) < 1:
            utils.write_error("disk volume is invalid [{}]".format(disk_volume))
            wrk_pass = False
        else:
            self.wrk_node.set_volume_size(disk_volume)

        min = self.TEntry_Min.get()
        if min is None or len(min) < 1:
            utils.write_error("Minimum value must be set")
            wrk_pass = False
        else:
            self.wrk_node.set_group_min(min)
            if self.wrk_node.get_group_min() < 1:
                utils.write_error("Minimum value must be >= 1")
                wrk_pass = False

        max = self.TEntry_Max.get()
        if max is None or len(max) < 1:
            utils.write_error("Maximum value must be set")
            wrk_pass = False
        else:
            self.wrk_node.set_group_max(max)
            if self.wrk_node.get_group_max() < 1 or self.wrk_node.get_group_max() < self.wrk_node.get_group_min():
                utils.write_error("Maximum value must be >= 1 and greater than minimum value")
                wrk_pass = False

        desired = self.TEntry_Desired.get()
        if desired is None or len(desired) < 1:
            utils.write_error("Desired value must be set")
            wrk_pass = False
        else:
            self.wrk_node.set_group_desired(desired)
            if self.wrk_node.get_group_desired() < 1:
                utils.write_error("Desired size must be >= 1".format(self.wrk_node.get_group_desired))
                wrk_pass = False
            elif self.wrk_node.get_group_desired() < self.wrk_node.get_group_min() or \
                self.wrk_node.get_group_desired() > self.wrk_node.get_group_max():
                utils.write_error("Desired size must be between min and max")
                wrk_pass = False

        inst_type = self.TEntry_Instance.get()
        if inst_type is None or len(inst_type) < 1:
            utils.write_error("Instance Type must be set")
            wrk_pass = False
        else:
            self.wrk_node.set_instance_type(inst_type)

        ami = self.TEntry_AMI.get()
        if ami is None or len(ami) < 1:
            utils.write_error("AMI must be set")
            wrk_pass = False
        else:
            self.wrk_node.set_ami(ami)

        if not wrk_pass:
            self.wrk_node = None
        self.cleanup()



# The following code is added to facilitate the Scrolled widgets you specified.

#if __name__ == '__main__':
#    vp_start_gui()





