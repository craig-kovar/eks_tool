#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Oct 29, 2019 10:23:43 AM CDT  platform: Darwin

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import lib.UI.kube_config_support as kube_config_support
import lib.utils.ekstool_utils as utils

def vp_start_gui(cb_config):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    kube_config_support.set_Tk_var()
    top = KubeTopLevel (root, cb_config)
    kube_config_support.init(root, top)
    try:
        root.mainloop()
    except UnicodeDecodeError:
        pass

w = None
def create_KubeTopLevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    kube_config_support.set_Tk_var()
    top = KubeTopLevel (w)
    kube_config_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_KubeTopLevel():
    global w
    w.destroy()
    w = None

class KubeTopLevel:
    def __init__(self, top=None, cb_config=None):
        self.cb_config = cb_config
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("899x820+-1473+220")
        top.title("Kubernetes Configuration")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Labelframe_Console = tk.LabelFrame(top)
        self.Labelframe_Console.place(relx=0.011, rely=0.695, relheight=0.299
                , relwidth=0.979)
        self.Labelframe_Console.configure(relief='groove')
        self.Labelframe_Console.configure(foreground="black")
        self.Labelframe_Console.configure(text='''Console Output''')
        self.Labelframe_Console.configure(background="#d9d9d9")
        self.Labelframe_Console.configure(highlightbackground="#d9d9d9")
        self.Labelframe_Console.configure(highlightcolor="black")

        self.Scrolledtext_Console = ScrolledText(self.Labelframe_Console)
        self.Scrolledtext_Console.place(relx=0.011, rely=0.082, relheight=0.882
                , relwidth=0.975, bordermode='ignore')
        self.Scrolledtext_Console.configure(background="white")
        self.Scrolledtext_Console.configure(font="TkTextFont")
        self.Scrolledtext_Console.configure(foreground="black")
        self.Scrolledtext_Console.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext_Console.configure(highlightcolor="black")
        self.Scrolledtext_Console.configure(insertbackground="black")
        self.Scrolledtext_Console.configure(insertborderwidth="3")
        self.Scrolledtext_Console.configure(selectbackground="#c4c4c4")
        self.Scrolledtext_Console.configure(selectforeground="black")
        self.Scrolledtext_Console.configure(wrap="none")

        self.Labelframe_General = tk.LabelFrame(top)
        self.Labelframe_General.place(relx=0.011, rely=0.0, relheight=0.152
                , relwidth=0.979)
        self.Labelframe_General.configure(relief='groove')
        self.Labelframe_General.configure(foreground="black")
        self.Labelframe_General.configure(text='''General Kubernetes Configuration''')
        self.Labelframe_General.configure(background="#d9d9d9")
        self.Labelframe_General.configure(highlightbackground="#d9d9d9")
        self.Labelframe_General.configure(highlightcolor="black")

        self.Label_NS = tk.Label(self.Labelframe_General)
        self.Label_NS.place(relx=0.011, rely=0.16, height=22, width=101
                , bordermode='ignore')
        self.Label_NS.configure(activebackground="#f9f9f9")
        self.Label_NS.configure(activeforeground="black")
        self.Label_NS.configure(background="#d9d9d9")
        self.Label_NS.configure(foreground="#000000")
        self.Label_NS.configure(highlightbackground="#d9d9d9")
        self.Label_NS.configure(highlightcolor="black")
        self.Label_NS.configure(text='''Namespace''')

        self.TEntry_NS = ttk.Entry(self.Labelframe_General)
        self.TEntry_NS.place(relx=0.136, rely=0.16, relheight=0.208, relwidth=0.216
                , bordermode='ignore')
        self.TEntry_NS.configure(takefocus="")
        self.TEntry_NS.configure(cursor="ibeam")
        self.TEntry_NS.insert(0, cb_config.cbcluster_config.namespace)

        self.Label_Cluster = tk.Label(self.Labelframe_General)
        self.Label_Cluster.place(relx=0.011, rely=0.48, height=22, width=101
                , bordermode='ignore')
        self.Label_Cluster.configure(activebackground="#f9f9f9")
        self.Label_Cluster.configure(activeforeground="black")
        self.Label_Cluster.configure(background="#d9d9d9")
        self.Label_Cluster.configure(foreground="#000000")
        self.Label_Cluster.configure(highlightbackground="#d9d9d9")
        self.Label_Cluster.configure(highlightcolor="black")
        self.Label_Cluster.configure(text='''Cluster Name''')

        self.TEntry_Cluster = ttk.Entry(self.Labelframe_General)
        self.TEntry_Cluster.place(relx=0.136, rely=0.48, relheight=0.208
                , relwidth=0.216, bordermode='ignore')
        self.TEntry_Cluster.configure(takefocus="")
        self.TEntry_Cluster.configure(cursor="ibeam")
        self.TEntry_Cluster.insert(0, cb_config.cbcluster_config.clustername)


        self.TCombobox_Version = ttk.Combobox(self.Labelframe_General)
        self.TCombobox_Version.place(relx=0.534, rely=0.16, relheight=0.216
                , relwidth=0.132, bordermode='ignore')
        self.TCombobox_Version.configure(textvariable=kube_config_support.versionbox)
        self.TCombobox_Version.configure(takefocus="")
        self.value_list = ["6.0.3", "6.0.2", "6.0.1", "6.0.0", "5.5.2", "5.5.1", "5.5.0"]
        self.TCombobox_Version.configure(values=self.value_list)
        self.TCombobox_Version.current(cb_config.cbcluster_config.version_loc)

        self.Label_Version = tk.Label(self.Labelframe_General)
        self.Label_Version.place(relx=0.398, rely=0.16, height=22, width=101
                , bordermode='ignore')
        self.Label_Version.configure(activebackground="#f9f9f9")
        self.Label_Version.configure(activeforeground="black")
        self.Label_Version.configure(background="#d9d9d9")
        self.Label_Version.configure(foreground="#000000")
        self.Label_Version.configure(highlightbackground="#d9d9d9")
        self.Label_Version.configure(highlightcolor="black")
        self.Label_Version.configure(text='''Version''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton_AA = ttk.Checkbutton(self.Labelframe_General)
        self.TCheckbutton_AA.place(relx=0.534, rely=0.4, relwidth=0.028
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_AA.configure(variable=kube_config_support.aa_btn)
        self.TCheckbutton_AA.configure(takefocus="")
        self.TCheckbutton_AA.configure(textvariable=kube_config_support.aacheck)
        if cb_config.cbcluster_config.antiaffinity:
            kube_config_support.aa_btn.set(1)
        else:
            kube_config_support.aa_btn.set(0)

        self.Label_Bucket = tk.Label(self.Labelframe_General)
        self.Label_Bucket.place(relx=0.705, rely=0.08, height=22, width=141
                , bordermode='ignore')
        self.Label_Bucket.configure(activebackground="#f9f9f9")
        self.Label_Bucket.configure(activeforeground="black")
        self.Label_Bucket.configure(anchor='w')
        self.Label_Bucket.configure(background="#d9d9d9")
        self.Label_Bucket.configure(foreground="#000000")
        self.Label_Bucket.configure(highlightbackground="#d9d9d9")
        self.Label_Bucket.configure(highlightcolor="black")
        self.Label_Bucket.configure(text='''Bucket Management''')

        self.TCheckbutton_Bkt = ttk.Checkbutton(self.Labelframe_General)
        self.TCheckbutton_Bkt.place(relx=0.886, rely=0.08, relwidth=0.028
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_Bkt.configure(variable=kube_config_support.bucket_btn)
        self.TCheckbutton_Bkt.configure(takefocus="")
        self.TCheckbutton_Bkt.configure(textvariable=kube_config_support.bktcheck)
        if not cb_config.cbcluster_config.disable_bucket_management:
            kube_config_support.bucket_btn.set(1)
        else:
            kube_config_support.bucket_btn.set(0)

        self.Label_SGW = tk.Label(self.Labelframe_General)
        self.Label_SGW.place(relx=0.705, rely=0.24, height=22, width=141
                , bordermode='ignore')
        self.Label_SGW.configure(activebackground="#f9f9f9")
        self.Label_SGW.configure(activeforeground="black")
        self.Label_SGW.configure(anchor='w')
        self.Label_SGW.configure(background="#d9d9d9")
        self.Label_SGW.configure(foreground="#000000")
        self.Label_SGW.configure(highlightbackground="#d9d9d9")
        self.Label_SGW.configure(highlightcolor="black")
        self.Label_SGW.configure(text='''SGW''')

        self.Label_App_Server = tk.Label(self.Labelframe_General)
        self.Label_App_Server.place(relx=0.705, rely=0.48, height=22, width=141
                , bordermode='ignore')
        self.Label_App_Server.configure(activebackground="#f9f9f9")
        self.Label_App_Server.configure(activeforeground="black")
        self.Label_App_Server.configure(anchor='w')
        self.Label_App_Server.configure(background="#d9d9d9")
        self.Label_App_Server.configure(foreground="#000000")
        self.Label_App_Server.configure(highlightbackground="#d9d9d9")
        self.Label_App_Server.configure(highlightcolor="black")
        self.Label_App_Server.configure(text='''App Server''')

        self.Label_Couchmart = tk.Label(self.Labelframe_General)
        self.Label_Couchmart.place(relx=0.705, rely=0.72, height=22, width=141
                , bordermode='ignore')
        self.Label_Couchmart.configure(activebackground="#f9f9f9")
        self.Label_Couchmart.configure(activeforeground="black")
        self.Label_Couchmart.configure(anchor='w')
        self.Label_Couchmart.configure(background="#d9d9d9")
        self.Label_Couchmart.configure(foreground="#000000")
        self.Label_Couchmart.configure(highlightbackground="#d9d9d9")
        self.Label_Couchmart.configure(highlightcolor="black")
        self.Label_Couchmart.configure(text='''Couchmart''')

        self.TEntry_SGW = ttk.Entry(self.Labelframe_General)
        self.TEntry_SGW.place(relx=0.818, rely=0.24, relheight=0.208
                , relwidth=0.08, bordermode='ignore')
        self.TEntry_SGW.configure(takefocus="")
        self.TEntry_SGW.configure(cursor="ibeam")
        self.TEntry_SGW.insert(0, cb_config.cbcluster_config.sgw)

        self.TButton_Load_SGW = ttk.Button(self.Labelframe_General)
        self.TButton_Load_SGW.place(relx=0.913, rely=0.10, relheight=0.250, width=70)

        self.TButton_Load_SGW.configure(command=lambda: kube_config_support.load_sgw())
        self.TButton_Load_SGW.configure(takefocus="")
        self.TButton_Load_SGW.configure(text='''Load''')

        self.TEntry_App_Server = ttk.Entry(self.Labelframe_General)
        self.TEntry_App_Server.place(relx=0.818, rely=0.48, relheight=0.208
                , relwidth=0.08, bordermode='ignore')
        self.TEntry_App_Server.configure(takefocus="")
        self.TEntry_App_Server.configure(cursor="ibeam")
        self.TEntry_App_Server.insert(0, cb_config.cbcluster_config.app)

        self.TEntry_Couchmart = ttk.Entry(self.Labelframe_General)
        self.TEntry_Couchmart.place(relx=0.818, rely=0.72, relheight=0.208
                , relwidth=0.08, bordermode='ignore')
        self.TEntry_Couchmart.configure(takefocus="")
        self.TEntry_Couchmart.configure(cursor="ibeam")
        self.TEntry_Couchmart.insert(0, cb_config.cbcluster_config.couchmart)

        self.Label_Anti_Aff = tk.Label(top)
        self.Label_Anti_Aff.place(relx=0.4, rely=0.061, height=22, width=101)
        self.Label_Anti_Aff.configure(activebackground="#f9f9f9")
        self.Label_Anti_Aff.configure(activeforeground="black")
        self.Label_Anti_Aff.configure(background="#d9d9d9")
        self.Label_Anti_Aff.configure(foreground="#000000")
        self.Label_Anti_Aff.configure(highlightbackground="#d9d9d9")
        self.Label_Anti_Aff.configure(highlightcolor="black")
        self.Label_Anti_Aff.configure(text='''Anti-Affinity''')

        self.Label_TLS = tk.Label(top)
        self.Label_TLS.place(relx=0.4, rely=0.098, height=22, width=101)
        self.Label_TLS.configure(activebackground="#f9f9f9")
        self.Label_TLS.configure(activeforeground="black")
        self.Label_TLS.configure(background="#d9d9d9")
        self.Label_TLS.configure(foreground="#000000")
        self.Label_TLS.configure(highlightbackground="#d9d9d9")
        self.Label_TLS.configure(highlightcolor="black")
        self.Label_TLS.configure(text='''TLS''')

        self.TCheckbutton_TLS = ttk.Checkbutton(top)
        self.TCheckbutton_TLS.place(relx=0.534, rely=0.098, relwidth=0.028
                , relheight=0.0, height=22)
        self.TCheckbutton_TLS.configure(variable=kube_config_support.tls_btn)
        self.TCheckbutton_TLS.configure(takefocus="")
        self.TCheckbutton_TLS.configure(textvariable=kube_config_support.tlscheck)
        if cb_config.cbcluster_config.tls:
            kube_config_support.tls_btn.set(1)
        else:
            kube_config_support.tls_btn.set(0)

        self.Labelframe_SVC = tk.LabelFrame(top)
        self.Labelframe_SVC.place(relx=0.011, rely=0.146, relheight=0.104
                , relwidth=0.979)
        self.Labelframe_SVC.configure(relief='groove')
        self.Labelframe_SVC.configure(foreground="black")
        self.Labelframe_SVC.configure(text='''Exposed Services''')
        self.Labelframe_SVC.configure(background="#d9d9d9")

        self.TCheckbutton_SVC_Admin = ttk.Checkbutton(self.Labelframe_SVC)
        self.TCheckbutton_SVC_Admin.place(relx=0.489, rely=0.235, relwidth=0.092
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_SVC_Admin.configure(variable=kube_config_support.svc_admin)
        self.TCheckbutton_SVC_Admin.configure(takefocus="")
        self.TCheckbutton_SVC_Admin.configure(text='''Admin''')
        kube_config_support.svc_admin.set(cb_config.cbcluster_config.expose_features['admin'])

        self.TCheckbutton_ExtDns = ttk.Checkbutton(self.Labelframe_SVC)
        self.TCheckbutton_ExtDns.place(relx=0.75, rely=0.588, relwidth=0.028
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_ExtDns.configure(variable=kube_config_support.ext_dns)
        self.TCheckbutton_ExtDns.configure(takefocus="")
        self.TCheckbutton_ExtDns.configure(textvariable=kube_config_support.bktcheck)
        if cb_config.cbcluster_config.external_dns:
            kube_config_support.ext_dns.set(1)
        else:
            kube_config_support.ext_dns.set(0)

        self.Label_Admin = tk.Label(top)
        self.Label_Admin.place(relx=0.022, rely=0.171, height=22, width=101)
        self.Label_Admin.configure(activebackground="#f9f9f9")
        self.Label_Admin.configure(activeforeground="black")
        self.Label_Admin.configure(background="#d9d9d9")
        self.Label_Admin.configure(foreground="#000000")
        self.Label_Admin.configure(highlightbackground="#d9d9d9")
        self.Label_Admin.configure(highlightcolor="black")
        self.Label_Admin.configure(text='''Expose Admin''')

        self.TCheckbutton_Admin = ttk.Checkbutton(top)
        self.TCheckbutton_Admin.place(relx=0.167, rely=0.171, relwidth=0.028
                , relheight=0.0, height=22)
        self.TCheckbutton_Admin.configure(variable=kube_config_support.adm_check)
        self.TCheckbutton_Admin.configure(takefocus="")
        self.TCheckbutton_Admin.configure(textvariable=kube_config_support.admincheck)
        if cb_config.cbcluster_config.expose_admin_console:
            kube_config_support.adm_check.set(1)
        else:
            kube_config_support.adm_check.set(0)

        self.Label_Admin_3 = tk.Label(top)
        self.Label_Admin_3.place(relx=0.022, rely=0.195, height=22, width=101)
        self.Label_Admin_3.configure(activebackground="#f9f9f9")
        self.Label_Admin_3.configure(activeforeground="black")
        self.Label_Admin_3.configure(background="#d9d9d9")
        self.Label_Admin_3.configure(foreground="#000000")
        self.Label_Admin_3.configure(highlightbackground="#d9d9d9")
        self.Label_Admin_3.configure(highlightcolor="black")
        self.Label_Admin_3.configure(text='''Admin Service''')

        self.TCombobox_AdmSvc = ttk.Combobox(top)
        self.TCombobox_AdmSvc.place(relx=0.167, rely=0.195, relheight=0.033
                , relwidth=0.129)
        self.TCombobox_AdmSvc.configure(textvariable=kube_config_support.adminbox)
        self.TCombobox_AdmSvc.configure(takefocus="")
        self.svc_list = ["data", "index", "query", "search", "eventing", "analytics"]
        self.TCombobox_AdmSvc.configure(values=self.svc_list)
        self.TCombobox_AdmSvc.current(cb_config.cbcluster_config.expose_admin_svc_loc)

        self.Label_Svc = tk.Label(top)
        self.Label_Svc.place(relx=0.345, rely=0.171, height=22, width=111)
        self.Label_Svc.configure(activebackground="#f9f9f9")
        self.Label_Svc.configure(activeforeground="black")
        self.Label_Svc.configure(background="#d9d9d9")
        self.Label_Svc.configure(foreground="#000000")
        self.Label_Svc.configure(highlightbackground="#d9d9d9")
        self.Label_Svc.configure(highlightcolor="black")
        self.Label_Svc.configure(text='''Expose Services''')

        self.TCheckbutton_SVC_XDCR = ttk.Checkbutton(top)
        self.TCheckbutton_SVC_XDCR.place(relx=0.489, rely=0.195, relwidth=0.09
                , relheight=0.0, height=22)
        self.TCheckbutton_SVC_XDCR.configure(variable=kube_config_support.svc_xdcr)
        self.TCheckbutton_SVC_XDCR.configure(takefocus="")
        self.TCheckbutton_SVC_XDCR.configure(text='''XDCR''')
        kube_config_support.svc_xdcr.set(cb_config.cbcluster_config.expose_features['xdcr'])

        self.TCheckbuttonSVCClient = ttk.Checkbutton(top)
        self.TCheckbuttonSVCClient.place(relx=0.489, rely=0.22, relwidth=0.09
                , relheight=0.0, height=22)
        self.TCheckbuttonSVCClient.configure(variable=kube_config_support.svc_client)
        self.TCheckbuttonSVCClient.configure(takefocus="")
        self.TCheckbuttonSVCClient.configure(text='''Client''')
        kube_config_support.svc_client.set(cb_config.cbcluster_config.expose_features['client'])

        self.Label_DNS = tk.Label(top)
        self.Label_DNS.place(relx=0.612, rely=0.171, height=22, width=111)
        self.Label_DNS.configure(activebackground="#f9f9f9")
        self.Label_DNS.configure(activeforeground="black")
        self.Label_DNS.configure(background="#d9d9d9")
        self.Label_DNS.configure(foreground="#000000")
        self.Label_DNS.configure(highlightbackground="#d9d9d9")
        self.Label_DNS.configure(highlightcolor="black")
        self.Label_DNS.configure(text='''DNS''')

        self.TEntry_DNS = ttk.Entry(top)
        self.TEntry_DNS.place(relx=0.723, rely=0.171, relheight=0.032
                , relwidth=0.256)
        self.TEntry_DNS.configure(takefocus="")
        self.TEntry_DNS.configure(cursor="ibeam")
        self.TEntry_DNS.insert(0, cb_config.cbcluster_config.dns)

        self.Label_External_DNS = tk.Label(top)
        self.Label_External_DNS.place(relx=0.612, rely=0.207, height=22
                , width=111)
        self.Label_External_DNS.configure(activebackground="#f9f9f9")
        self.Label_External_DNS.configure(activeforeground="black")
        self.Label_External_DNS.configure(background="#d9d9d9")
        self.Label_External_DNS.configure(foreground="#000000")
        self.Label_External_DNS.configure(highlightbackground="#d9d9d9")
        self.Label_External_DNS.configure(highlightcolor="black")
        self.Label_External_DNS.configure(text='''External DNS''')

        self.Labelframe_Cluster = tk.LabelFrame(top)
        self.Labelframe_Cluster.place(relx=0.011, rely=0.256, relheight=0.14
                , relwidth=0.979)
        self.Labelframe_Cluster.configure(relief='groove')
        self.Labelframe_Cluster.configure(foreground="black")
        self.Labelframe_Cluster.configure(text='''Cluster''')
        self.Labelframe_Cluster.configure(background="#d9d9d9")

        self.Labelframe_Quotas = tk.LabelFrame(self.Labelframe_Cluster)
        self.Labelframe_Quotas.place(relx=0.011, rely=0.174, relheight=0.652
                , relwidth=0.557, bordermode='ignore')
        self.Labelframe_Quotas.configure(relief='groove')
        self.Labelframe_Quotas.configure(foreground="black")
        self.Labelframe_Quotas.configure(text='''Quotas''')
        self.Labelframe_Quotas.configure(background="#d9d9d9")

        self.Label_Data = tk.Label(top)
        self.Label_Data.place(relx=0.033, rely=0.305, height=22, width=61)
        self.Label_Data.configure(activebackground="#f9f9f9")
        self.Label_Data.configure(activeforeground="black")
        self.Label_Data.configure(background="#d9d9d9")
        self.Label_Data.configure(foreground="#000000")
        self.Label_Data.configure(highlightbackground="#d9d9d9")
        self.Label_Data.configure(highlightcolor="black")
        self.Label_Data.configure(justify='left')
        self.Label_Data.configure(text='''Data''')

        self.Label_Index = tk.Label(top)
        self.Label_Index.place(relx=0.033, rely=0.329, height=22, width=61)
        self.Label_Index.configure(activebackground="#f9f9f9")
        self.Label_Index.configure(activeforeground="black")
        self.Label_Index.configure(background="#d9d9d9")
        self.Label_Index.configure(foreground="#000000")
        self.Label_Index.configure(highlightbackground="#d9d9d9")
        self.Label_Index.configure(highlightcolor="black")
        self.Label_Index.configure(justify='left')
        self.Label_Index.configure(text='''Index''')

        self.TEntry_Data = ttk.Entry(top)
        self.TEntry_Data.place(relx=0.1, rely=0.293, relheight=0.032
                , relwidth=0.078)
        self.TEntry_Data.configure(takefocus="")
        self.TEntry_Data.configure(cursor="ibeam")
        self.TEntry_Data.insert(0, cb_config.cbcluster_config.cluster['dataServiceMemoryQuota'])

        self.TEntry_Index = ttk.Entry(top)
        self.TEntry_Index.place(relx=0.1, rely=0.329, relheight=0.032
                , relwidth=0.078)
        self.TEntry_Index.configure(takefocus="")
        self.TEntry_Index.configure(cursor="ibeam")
        self.TEntry_Index.insert(0, cb_config.cbcluster_config.cluster['indexServiceMemoryQuota'])

        self.Label_Search = tk.Label(top)
        self.Label_Search.place(relx=0.189, rely=0.293, height=22, width=61)
        self.Label_Search.configure(activebackground="#f9f9f9")
        self.Label_Search.configure(activeforeground="black")
        self.Label_Search.configure(background="#d9d9d9")
        self.Label_Search.configure(foreground="#000000")
        self.Label_Search.configure(highlightbackground="#d9d9d9")
        self.Label_Search.configure(highlightcolor="black")
        self.Label_Search.configure(justify='left')
        self.Label_Search.configure(text='''Search''')

        self.Label_Eventing = tk.Label(top)
        self.Label_Eventing.place(relx=0.189, rely=0.329, height=22, width=61)
        self.Label_Eventing.configure(activebackground="#f9f9f9")
        self.Label_Eventing.configure(activeforeground="black")
        self.Label_Eventing.configure(background="#d9d9d9")
        self.Label_Eventing.configure(foreground="#000000")
        self.Label_Eventing.configure(highlightbackground="#d9d9d9")
        self.Label_Eventing.configure(highlightcolor="black")
        self.Label_Eventing.configure(justify='left')
        self.Label_Eventing.configure(text='''Eventing''')

        self.TEntry_Search = ttk.Entry(top)
        self.TEntry_Search.place(relx=0.267, rely=0.293, relheight=0.032
                , relwidth=0.078)
        self.TEntry_Search.configure(takefocus="")
        self.TEntry_Search.configure(cursor="ibeam")
        self.TEntry_Search.insert(0, cb_config.cbcluster_config.cluster['searchServiceMemoryQuota'])

        self.TEntry_Eventing = ttk.Entry(top)
        self.TEntry_Eventing.place(relx=0.267, rely=0.329, relheight=0.032
                , relwidth=0.078)
        self.TEntry_Eventing.configure(takefocus="")
        self.TEntry_Eventing.configure(cursor="ibeam")
        self.TEntry_Eventing.insert(0, cb_config.cbcluster_config.cluster['eventingServiceMemoryQuota'])

        self.Label_Analytics = tk.Label(top)
        self.Label_Analytics.place(relx=0.367, rely=0.293, height=22, width=61)
        self.Label_Analytics.configure(activebackground="#f9f9f9")
        self.Label_Analytics.configure(activeforeground="black")
        self.Label_Analytics.configure(background="#d9d9d9")
        self.Label_Analytics.configure(foreground="#000000")
        self.Label_Analytics.configure(highlightbackground="#d9d9d9")
        self.Label_Analytics.configure(highlightcolor="black")
        self.Label_Analytics.configure(justify='left')
        self.Label_Analytics.configure(text='''Analytics''')

        self.TEntry_Analytics = ttk.Entry(top)
        self.TEntry_Analytics.place(relx=0.456, rely=0.293, relheight=0.032
                , relwidth=0.078)
        self.TEntry_Analytics.configure(takefocus="")
        self.TEntry_Analytics.configure(cursor="ibeam")
        self.TEntry_Analytics.insert(0, cb_config.cbcluster_config.cluster['analyticsServiceMemoryQuota'])

        self.Label_Index_Type = tk.Label(top)
        self.Label_Index_Type.place(relx=0.59, rely=0.28, height=22, width=111)
        self.Label_Index_Type.configure(activebackground="#f9f9f9")
        self.Label_Index_Type.configure(activeforeground="black")
        self.Label_Index_Type.configure(anchor='w')
        self.Label_Index_Type.configure(background="#d9d9d9")
        self.Label_Index_Type.configure(foreground="#000000")
        self.Label_Index_Type.configure(highlightbackground="#d9d9d9")
        self.Label_Index_Type.configure(highlightcolor="black")
        self.Label_Index_Type.configure(justify='left')
        self.Label_Index_Type.configure(text='''Index Storage''')

        self.TCombobox_Index_Store = ttk.Combobox(top)
        self.TCombobox_Index_Store.place(relx=0.712, rely=0.28, relheight=0.033
                , relwidth=0.14)
        self.TCombobox_Index_Store.configure(textvariable=kube_config_support.idxbox)
        self.TCombobox_Index_Store.configure(takefocus="")
        self.idx_list = ["plasma", "memory_optimized"]
        self.TCombobox_Index_Store.configure(values=self.idx_list)
        self.TCombobox_Index_Store.current(cb_config.cbcluster_config.idx_loc)

        self.Label_AF_time = tk.Label(top)
        self.Label_AF_time.place(relx=0.59, rely=0.317, height=22, width=161)
        self.Label_AF_time.configure(activebackground="#f9f9f9")
        self.Label_AF_time.configure(activeforeground="black")
        self.Label_AF_time.configure(anchor='w')
        self.Label_AF_time.configure(background="#d9d9d9")
        self.Label_AF_time.configure(foreground="#000000")
        self.Label_AF_time.configure(highlightbackground="#d9d9d9")
        self.Label_AF_time.configure(highlightcolor="black")
        self.Label_AF_time.configure(justify='left')
        self.Label_AF_time.configure(text='''Autofailover Timeout''')

        self.TEntry_AF_Time = ttk.Entry(top)
        self.TEntry_AF_Time.place(relx=0.768, rely=0.317, relheight=0.032
                , relwidth=0.078)
        self.TEntry_AF_Time.configure(takefocus="")
        self.TEntry_AF_Time.configure(cursor="ibeam")
        self.TEntry_AF_Time.insert(0, cb_config.cbcluster_config.cluster['autoFailoverTimeout'])

        self.Label_AF_events = tk.Label(top)
        self.Label_AF_events.place(relx=0.59, rely=0.354, height=22, width=161)
        self.Label_AF_events.configure(activebackground="#f9f9f9")
        self.Label_AF_events.configure(activeforeground="black")
        self.Label_AF_events.configure(anchor='w')
        self.Label_AF_events.configure(background="#d9d9d9")
        self.Label_AF_events.configure(foreground="#000000")
        self.Label_AF_events.configure(highlightbackground="#d9d9d9")
        self.Label_AF_events.configure(highlightcolor="black")
        self.Label_AF_events.configure(justify='left')
        self.Label_AF_events.configure(text='''Autofailover Max Events''')

        self.TEntry_AF_events = ttk.Entry(top)
        self.TEntry_AF_events.place(relx=0.768, rely=0.354, relheight=0.032
                , relwidth=0.078)
        self.TEntry_AF_events.configure(takefocus="")
        self.TEntry_AF_events.configure(cursor="ibeam")
        self.TEntry_AF_events.insert(0, cb_config.cbcluster_config.cluster['autoFailoverMaxCount'])

        self.Labelframe_Buckets = tk.LabelFrame(top)
        self.Labelframe_Buckets.place(relx=0.011, rely=0.402, relheight=0.104
                , relwidth=0.979)
        self.Labelframe_Buckets.configure(relief='groove')
        self.Labelframe_Buckets.configure(foreground="black")
        self.Labelframe_Buckets.configure(text='''Buckets''')
        self.Labelframe_Buckets.configure(background="#d9d9d9")

        self.Scrolledlistbox_Buckets = ScrolledListBox(self.Labelframe_Buckets)
        self.Scrolledlistbox_Buckets.place(relx=0.011, rely=0.235, relheight=0.635
                , relwidth=0.809, bordermode='ignore')
        self.Scrolledlistbox_Buckets.configure(background="white")
        self.Scrolledlistbox_Buckets.configure(font="TkFixedFont")
        self.Scrolledlistbox_Buckets.configure(foreground="black")
        self.Scrolledlistbox_Buckets.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox_Buckets.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox_Buckets.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox_Buckets.configure(selectforeground="black")
        for iter in cb_config.cbcluster_config.buckets:
            item = cb_config.cbcluster_config.buckets[iter]
            self.Scrolledlistbox_Buckets.insert('end', "Name: {0}; Type: {1}; Quota: {2}; Replicas: {3}; ioPriority: {4}; eviction: {5}; conflictResolution: {6}; flush: {7}".format(
                                           item.name, item.type, item.memoryQuota,
                                           item.replicas, item.ioPriority,
                                           item.evictionPolicy, item.conflictResolution,
                                           item.enableFlush
                                       ))

        self.TButton_Add_Bucket = ttk.Button(self.Labelframe_Buckets)
        self.TButton_Add_Bucket.place(relx=0.841, rely=0.235, height=24
                , width=137, bordermode='ignore')
        self.TButton_Add_Bucket.configure(command=kube_config_support.add_bucket)
        self.TButton_Add_Bucket.configure(takefocus="")
        self.TButton_Add_Bucket.configure(text='''Add Bucket''')

        self.TButton_Delete_Bucket = ttk.Button(top)
        self.TButton_Delete_Bucket.place(relx=0.834, rely=0.463, height=24
                , width=137)
        self.TButton_Delete_Bucket.configure(command=kube_config_support.del_bucket)
        self.TButton_Delete_Bucket.configure(takefocus="")
        self.TButton_Delete_Bucket.configure(text='''Delete Bucket''')

        self.Labelframe_Servers = tk.LabelFrame(top)
        self.Labelframe_Servers.place(relx=0.011, rely=0.512, relheight=0.14
                , relwidth=0.979)
        self.Labelframe_Servers.configure(relief='groove')
        self.Labelframe_Servers.configure(foreground="black")
        self.Labelframe_Servers.configure(text='''Servers''')
        self.Labelframe_Servers.configure(background="#d9d9d9")

        self.Scrolledlistbox_Servers = ScrolledListBox(self.Labelframe_Servers)
        self.Scrolledlistbox_Servers.place(relx=0.011, rely=0.174, relheight=0.73
                , relwidth=0.809, bordermode='ignore')
        self.Scrolledlistbox_Servers.configure(background="white")
        self.Scrolledlistbox_Servers.configure(font="TkFixedFont")
        self.Scrolledlistbox_Servers.configure(foreground="black")
        self.Scrolledlistbox_Servers.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox_Servers.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox_Servers.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox_Servers.configure(selectforeground="black")
        for iter in cb_config.cbcluster_config.servers:
            item = cb_config.cbcluster_config.servers[iter]
            self.Scrolledlistbox_Servers.insert('end',
                                         "Name: {0}; Size: {1}; Services: {2}".format(item.name, item.size,
                                                                                      item.services))

        self.TButton_Add_Server = ttk.Button(self.Labelframe_Servers)
        self.TButton_Add_Server.place(relx=0.841, rely=0.174, height=24
                , width=137, bordermode='ignore')
        self.TButton_Add_Server.configure(command=kube_config_support.add_server)
        self.TButton_Add_Server.configure(takefocus="")
        self.TButton_Add_Server.configure(text='''Add Server''')

        self.TButton_Edit_Server = ttk.Button(self.Labelframe_Servers)
        self.TButton_Edit_Server.place(relx=0.841, rely=0.435, height=24
                , width=137, bordermode='ignore')
        self.TButton_Edit_Server.configure(command=kube_config_support.edit_server)
        self.TButton_Edit_Server.configure(takefocus="")
        self.TButton_Edit_Server.configure(text='''Edit Server''')

        self.TButton_Del_Server = ttk.Button(self.Labelframe_Servers)
        self.TButton_Del_Server.place(relx=0.841, rely=0.696, height=24
                , width=137, bordermode='ignore')
        self.TButton_Del_Server.configure(command=kube_config_support.del_server)
        self.TButton_Del_Server.configure(takefocus="")
        self.TButton_Del_Server.configure(text='''Delete Server''')

        self.TButton_Build_Cluster = ttk.Button(top)
        self.TButton_Build_Cluster.place(relx=0.69, rely=0.659, height=24
                , width=128)
        self.TButton_Build_Cluster.configure(command=lambda: kube_config_support.build_cluster(cb_config))
        self.TButton_Build_Cluster.configure(takefocus="")
        self.TButton_Build_Cluster.configure(text='''Deploy Cluster''')

        self.TButton_Cancel = ttk.Button(top)
        self.TButton_Cancel.place(relx=0.845, rely=0.659, height=24
                , width=128)
        self.TButton_Cancel.configure(command=lambda: kube_config_support.on_cancel(cb_config))
        self.TButton_Cancel.configure(takefocus="")
        self.TButton_Cancel.configure(text='''Return to Main''')

        utils.set_scroll(self.Scrolledtext_Console)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





