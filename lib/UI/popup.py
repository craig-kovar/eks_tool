#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Oct 21, 2019 11:58:25 AM CDT  platform: Darwin

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

class PopupWindow(object):
    def __init__(self, master, msg):
        self.master = master
        top=self.top=tk.Toplevel(master)
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("521x207+-1418+237")
        top.title(msg)
        top.configure(background="#d9d9d9")

        self.Label_Pop = tk.Label(top)
        self.Label_Pop.place(relx=0.077, rely=0.097, height=32, width=451)
        self.Label_Pop.configure(background="#d9d9d9")
        self.Label_Pop.configure(foreground="#000000")
        self.Label_Pop.configure(text=msg)

        self.entry_var = tk.StringVar()

        self.TEntry_Pop = ttk.Entry(top)
        self.TEntry_Pop.place(relx=0.134, rely=0.29, relheight=0.174
                , relwidth=0.787)
        self.TEntry_Pop.configure(takefocus="True")
        self.TEntry_Pop.configure(textvariable=self.entry_var)
        self.TEntry_Pop.configure(cursor="ibeam")

        self.TButton_OK = ttk.Button(top)
        self.TButton_OK.place(relx=0.499, rely=0.628, height=24, width=87)
        self.TButton_OK.configure(command=lambda: self.ok_click())
        self.TButton_OK.configure(takefocus="")
        self.TButton_OK.configure(text='''OK''')

        self.TButton_Cancel = ttk.Button(top)
        self.TButton_Cancel.place(relx=0.729, rely=0.628, height=24, width=87)
        self.TButton_Cancel.configure(command=lambda: self.cancel_click())
        self.TButton_Cancel.configure(takefocus="")
        self.TButton_Cancel.configure(text='''Cancel''')

    def show(self):
        self.TEntry_Pop.focus_force()
        self.top.wait_window()
        return self.entry_var.get()

    def ok_click(self):
        self.cleanup()

    def cancel_click(self):
        self.TEntry_Pop.delete(0, 'end')
        self.cleanup()

    def cleanup(self):
        self.top.destroy()



