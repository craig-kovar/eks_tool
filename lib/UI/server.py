#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Nov 01, 2019 07:52:23 AM CDT  platform: Darwin

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from lib.configurations.CBClusterConfig import CBClusterServer
from lib.UI.popup import PopupWindow as dialog
from lib.UI.vct import Toplevel_VCT as vct
import lib.cloud.ICloudUtils as cloud


def destroy_ServerTopLevel():
    global w
    w.destroy()
    w = None


class ServerTopLevel:
    def __init__(self, master, server, cbcluster_config):
        self.master = master
        top = self.top = tk.Toplevel(master)

        if server is None:
            self.server = CBClusterServer()
        else:
            self.server = server

        self.cbcluster_config = cbcluster_config

        self.sizetype = ['Ki', 'Mi', 'Gi']
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("798x630+-1462+251")
        top.title("Server Configuration")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label_Name = tk.Label(top)
        self.Label_Name.place(relx=0.025, rely=0.032, height=22, width=151)
        self.Label_Name.configure(activebackground="#f9f9f9")
        self.Label_Name.configure(activeforeground="black")
        self.Label_Name.configure(anchor='w')
        self.Label_Name.configure(background="#d9d9d9")
        self.Label_Name.configure(foreground="#000000")
        self.Label_Name.configure(highlightbackground="#d9d9d9")
        self.Label_Name.configure(highlightcolor="black")
        self.Label_Name.configure(text='''Name''')

        self.TEntry_Name = ttk.Entry(top)
        self.TEntry_Name.place(relx=0.138, rely=0.032, relheight=0.041
                , relwidth=0.238)
        self.TEntry_Name.configure(takefocus="")
        self.TEntry_Name.configure(cursor="ibeam")
        self.TEntry_Name.insert(0, str(self.server.name))

        self.Label_Size = tk.Label(top)
        self.Label_Size.place(relx=0.025, rely=0.095, height=22, width=151)
        self.Label_Size.configure(activebackground="#f9f9f9")
        self.Label_Size.configure(activeforeground="black")
        self.Label_Size.configure(anchor='w')
        self.Label_Size.configure(background="#d9d9d9")
        self.Label_Size.configure(foreground="#000000")
        self.Label_Size.configure(highlightbackground="#d9d9d9")
        self.Label_Size.configure(highlightcolor="black")
        self.Label_Size.configure(text='''Size''')

        self.TEntry_Size = ttk.Entry(top)
        self.TEntry_Size.place(relx=0.138, rely=0.095, relheight=0.041
                , relwidth=0.238)
        self.TEntry_Size.configure(takefocus="")
        self.TEntry_Size.configure(cursor="ibeam")
        self.TEntry_Size.insert(0, self.server.size)

        self.Labelframe_Resources = tk.LabelFrame(top)
        self.Labelframe_Resources.place(relx=0.013, rely=0.175, relheight=0.167
                , relwidth=0.952)
        self.Labelframe_Resources.configure(relief='groove')
        self.Labelframe_Resources.configure(foreground="black")
        self.Labelframe_Resources.configure(text='''Resources''')
        self.Labelframe_Resources.configure(background="#d9d9d9")
        self.Labelframe_Resources.configure(highlightbackground="#d9d9d9")
        self.Labelframe_Resources.configure(highlightcolor="black")

        self.Label_Limits = tk.Label(self.Labelframe_Resources)
        self.Label_Limits.place(relx=0.013, rely=0.286, height=22, width=45
                , bordermode='ignore')
        self.Label_Limits.configure(activebackground="#f9f9f9")
        self.Label_Limits.configure(activeforeground="black")
        self.Label_Limits.configure(anchor='w')
        self.Label_Limits.configure(background="#d9d9d9")
        self.Label_Limits.configure(foreground="#000000")
        self.Label_Limits.configure(highlightbackground="#d9d9d9")
        self.Label_Limits.configure(highlightcolor="black")
        self.Label_Limits.configure(text='''Limits''')

        self.Label_Requests = tk.Label(self.Labelframe_Resources)
        self.Label_Requests.place(relx=0.013, rely=0.571, height=22, width=75
                , bordermode='ignore')
        self.Label_Requests.configure(activebackground="#f9f9f9")
        self.Label_Requests.configure(activeforeground="black")
        self.Label_Requests.configure(anchor='sw')
        self.Label_Requests.configure(background="#d9d9d9")
        self.Label_Requests.configure(foreground="#000000")
        self.Label_Requests.configure(highlightbackground="#d9d9d9")
        self.Label_Requests.configure(highlightcolor="black")
        self.Label_Requests.configure(text='''Requests''')

        self.Label_Limits_CPU = tk.Label(self.Labelframe_Resources)
        self.Label_Limits_CPU.place(relx=0.184, rely=0.286, height=22, width=45
                , bordermode='ignore')
        self.Label_Limits_CPU.configure(activebackground="#f9f9f9")
        self.Label_Limits_CPU.configure(activeforeground="black")
        self.Label_Limits_CPU.configure(anchor='w')
        self.Label_Limits_CPU.configure(background="#d9d9d9")
        self.Label_Limits_CPU.configure(foreground="#000000")
        self.Label_Limits_CPU.configure(highlightbackground="#d9d9d9")
        self.Label_Limits_CPU.configure(highlightcolor="black")
        self.Label_Limits_CPU.configure(text='''CPU''')

        self.Label_Limits_CPU_5 = tk.Label(self.Labelframe_Resources)
        self.Label_Limits_CPU_5.place(relx=0.184, rely=0.571, height=22, width=45
                , bordermode='ignore')
        self.Label_Limits_CPU_5.configure(activebackground="#f9f9f9")
        self.Label_Limits_CPU_5.configure(activeforeground="black")
        self.Label_Limits_CPU_5.configure(anchor='sw')
        self.Label_Limits_CPU_5.configure(background="#d9d9d9")
        self.Label_Limits_CPU_5.configure(foreground="#000000")
        self.Label_Limits_CPU_5.configure(highlightbackground="#d9d9d9")
        self.Label_Limits_CPU_5.configure(highlightcolor="black")
        self.Label_Limits_CPU_5.configure(text='''CPU''')

        self.TEntry_Limit_CPU = ttk.Entry(self.Labelframe_Resources)
        self.TEntry_Limit_CPU.place(relx=0.25, rely=0.286, relheight=0.248
                , relwidth=0.066, bordermode='ignore')
        self.TEntry_Limit_CPU.configure(takefocus="")
        self.TEntry_Limit_CPU.configure(cursor="ibeam")
        self.TEntry_Limit_CPU.insert(0, str(self.server.pod.limits['cpu']))

        self.Label_Limits_Mem = tk.Label(self.Labelframe_Resources)
        self.Label_Limits_Mem.place(relx=0.368, rely=0.286, height=22, width=65
                , bordermode='ignore')
        self.Label_Limits_Mem.configure(activebackground="#f9f9f9")
        self.Label_Limits_Mem.configure(activeforeground="black")
        self.Label_Limits_Mem.configure(anchor='w')
        self.Label_Limits_Mem.configure(background="#d9d9d9")
        self.Label_Limits_Mem.configure(foreground="#000000")
        self.Label_Limits_Mem.configure(highlightbackground="#d9d9d9")
        self.Label_Limits_Mem.configure(highlightcolor="black")
        self.Label_Limits_Mem.configure(text='''Memory''')

        self.Label_Limits_Mem_8 = tk.Label(self.Labelframe_Resources)
        self.Label_Limits_Mem_8.place(relx=0.368, rely=0.571, height=22, width=65
                , bordermode='ignore')
        self.Label_Limits_Mem_8.configure(activebackground="#f9f9f9")
        self.Label_Limits_Mem_8.configure(activeforeground="black")
        self.Label_Limits_Mem_8.configure(anchor='sw')
        self.Label_Limits_Mem_8.configure(background="#d9d9d9")
        self.Label_Limits_Mem_8.configure(foreground="#000000")
        self.Label_Limits_Mem_8.configure(highlightbackground="#d9d9d9")
        self.Label_Limits_Mem_8.configure(highlightcolor="black")
        self.Label_Limits_Mem_8.configure(text='''Memory''')

        self.TEntry_Limit_Mem = ttk.Entry(self.Labelframe_Resources)
        self.TEntry_Limit_Mem.place(relx=0.474, rely=0.286, relheight=0.248
                , relwidth=0.066, bordermode='ignore')
        self.TEntry_Limit_Mem.configure(takefocus="")
        self.TEntry_Limit_Mem.configure(cursor="ibeam")
        self.TEntry_Limit_Mem.insert(0, self.server.pod.limits['memory'])

        self.TEntry_Req_Mem = ttk.Entry(self.Labelframe_Resources)
        self.TEntry_Req_Mem.place(relx=0.474, rely=0.571, relheight=0.248
                , relwidth=0.066, bordermode='ignore')
        self.TEntry_Req_Mem.configure(takefocus="")
        self.TEntry_Req_Mem.configure(cursor="ibeam")
        self.TEntry_Req_Mem.insert(0, self.server.pod.requests['memory'])


        self.lim_mem_cbox = tk.StringVar()
        self.lim_mem_cbox.set(self.server.pod.limits['memory_size'])
        self.TCombobox_Lim_Mem = ttk.Combobox(self.Labelframe_Resources)
        self.TCombobox_Lim_Mem.place(relx=0.553, rely=0.286, relheight=0.257
                , relwidth=0.087, bordermode='ignore')
        self.TCombobox_Lim_Mem.configure(textvariable=self.lim_mem_cbox)
        self.TCombobox_Lim_Mem.configure(takefocus="")
        self.TCombobox_Lim_Mem.configure(values=self.sizetype)
        #self.TCombobox_Lim_Mem.current(2)

        self.req_mem_cbox = tk.StringVar()
        self.req_mem_cbox.set(self.server.pod.requests['memory_size'])
        self.TCombobox_Req_Mem = ttk.Combobox(self.Labelframe_Resources)
        self.TCombobox_Req_Mem.place(relx=0.553, rely=0.571, relheight=0.257
                , relwidth=0.087, bordermode='ignore')
        self.TCombobox_Req_Mem.configure(textvariable=self.req_mem_cbox)
        self.TCombobox_Req_Mem.configure(takefocus="")
        self.TCombobox_Req_Mem.configure(values=self.sizetype)
        #self.TCombobox_Req_Mem.current(2)

        self.Label_Limits_Storage = tk.Label(self.Labelframe_Resources)
        self.Label_Limits_Storage.place(relx=0.684, rely=0.286, height=22
                , width=65, bordermode='ignore')
        self.Label_Limits_Storage.configure(activebackground="#f9f9f9")
        self.Label_Limits_Storage.configure(activeforeground="black")
        self.Label_Limits_Storage.configure(anchor='w')
        self.Label_Limits_Storage.configure(background="#d9d9d9")
        self.Label_Limits_Storage.configure(foreground="#000000")
        self.Label_Limits_Storage.configure(highlightbackground="#d9d9d9")
        self.Label_Limits_Storage.configure(highlightcolor="black")
        self.Label_Limits_Storage.configure(text='''Storage''')

        self.Label_Req_Storage = tk.Label(self.Labelframe_Resources)
        self.Label_Req_Storage.place(relx=0.684, rely=0.571, height=22, width=65
                , bordermode='ignore')
        self.Label_Req_Storage.configure(activebackground="#f9f9f9")
        self.Label_Req_Storage.configure(activeforeground="black")
        self.Label_Req_Storage.configure(anchor='sw')
        self.Label_Req_Storage.configure(background="#d9d9d9")
        self.Label_Req_Storage.configure(foreground="#000000")
        self.Label_Req_Storage.configure(highlightbackground="#d9d9d9")
        self.Label_Req_Storage.configure(highlightcolor="black")
        self.Label_Req_Storage.configure(text='''Storage''')

        self.TEntry_Limit_Storage = ttk.Entry(self.Labelframe_Resources)
        self.TEntry_Limit_Storage.place(relx=0.776, rely=0.286, relheight=0.248
                , relwidth=0.066, bordermode='ignore')
        self.TEntry_Limit_Storage.configure(takefocus="")
        self.TEntry_Limit_Storage.configure(cursor="ibeam")
        self.TEntry_Limit_Storage.insert(0, self.server.pod.limits['storage'])

        self.TEntry_Req_Storage = ttk.Entry(self.Labelframe_Resources)
        self.TEntry_Req_Storage.place(relx=0.776, rely=0.571, relheight=0.248
                , relwidth=0.066, bordermode='ignore')
        self.TEntry_Req_Storage.configure(takefocus="")
        self.TEntry_Req_Storage.configure(cursor="ibeam")
        self.TEntry_Req_Storage.insert(0, self.server.pod.requests['storage'])

        self.lim_store_cbox = tk.StringVar()
        self.lim_store_cbox.set(self.server.pod.limits['storage_size'])
        self.TCombobox_Lim_Storage = ttk.Combobox(self.Labelframe_Resources)
        self.TCombobox_Lim_Storage.place(relx=0.855, rely=0.286, relheight=0.257
                , relwidth=0.087, bordermode='ignore')
        self.TCombobox_Lim_Storage.configure(textvariable=self.lim_store_cbox)
        self.TCombobox_Lim_Storage.configure(takefocus="")
        self.TCombobox_Lim_Storage.configure(values=self.sizetype)
        #self.TCombobox_Lim_Storage.current(2)

        self.req_store_cbox = tk.StringVar()
        self.req_store_cbox.set(self.server.pod.requests['storage_size'])
        self.TCombobox_Req_Storage = ttk.Combobox(self.Labelframe_Resources)
        self.TCombobox_Req_Storage.place(relx=0.855, rely=0.571, relheight=0.257
                , relwidth=0.087, bordermode='ignore')
        self.TCombobox_Req_Storage.configure(textvariable=self.req_store_cbox)
        self.TCombobox_Req_Storage.configure(takefocus="")
        self.TCombobox_Req_Storage.configure(values=self.sizetype)
        #self.TCombobox_Req_Storage.current(2)

        self.TEntry_Req_CPU = ttk.Entry(top)
        self.TEntry_Req_CPU.place(relx=0.251, rely=0.27, relheight=0.041
                , relwidth=0.063)
        self.TEntry_Req_CPU.configure(takefocus="")
        self.TEntry_Req_CPU.configure(cursor="ibeam")
        self.TEntry_Req_CPU.insert(0, self.server.pod.requests['cpu'])

        self.Labelframe_VCT = tk.LabelFrame(top)
        self.Labelframe_VCT.place(relx=0.013, rely=0.349, relheight=0.167
                , relwidth=0.952)
        self.Labelframe_VCT.configure(relief='groove')
        self.Labelframe_VCT.configure(foreground="black")
        self.Labelframe_VCT.configure(text='''Volume Claim Templates''')
        self.Labelframe_VCT.configure(background="#d9d9d9")
        self.Labelframe_VCT.configure(highlightbackground="#d9d9d9")
        self.Labelframe_VCT.configure(highlightcolor="black")

        self.Scrolledlistbox_VCT = ScrolledListBox(self.Labelframe_VCT)
        self.Scrolledlistbox_VCT.place(relx=0.013, rely=0.19, relheight=0.705
                , relwidth=0.818, bordermode='ignore')
        self.Scrolledlistbox_VCT.configure(background="white")
        self.Scrolledlistbox_VCT.configure(font="TkFixedFont")
        self.Scrolledlistbox_VCT.configure(foreground="black")
        self.Scrolledlistbox_VCT.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox_VCT.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox_VCT.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox_VCT.configure(selectforeground="black")

        self.TButton_Add_VCT = ttk.Button(self.Labelframe_VCT)
        self.TButton_Add_VCT.place(relx=0.855, rely=0.143, height=24, width=90
                , bordermode='ignore')
        self.TButton_Add_VCT.configure(command=lambda: self.on_vct_add())
        self.TButton_Add_VCT.configure(takefocus="")
        self.TButton_Add_VCT.configure(text='''Add VCT''')

        self.TButton_Edit_VCT = ttk.Button(self.Labelframe_VCT)
        self.TButton_Edit_VCT.place(relx=0.855, rely=0.381, height=24, width=90
                , bordermode='ignore')
        self.TButton_Edit_VCT.configure(command=lambda: self.on_vct_edit())
        self.TButton_Edit_VCT.configure(takefocus="")
        self.TButton_Edit_VCT.configure(text='''Edit VCT''')

        self.TButton_Del_VCT = ttk.Button(top)
        self.TButton_Del_VCT.place(relx=0.827, rely=0.46, height=24, width=90)
        self.TButton_Del_VCT.configure(command=lambda: self.on_vct_del())
        self.TButton_Del_VCT.configure(takefocus="")
        self.TButton_Del_VCT.configure(text='''Del VCT''')

        self.Labelframe_NodeSelect = tk.LabelFrame(top)
        self.Labelframe_NodeSelect.place(relx=0.013, rely=0.524, relheight=0.167
                , relwidth=0.952)
        self.Labelframe_NodeSelect.configure(relief='groove')
        self.Labelframe_NodeSelect.configure(foreground="black")
        self.Labelframe_NodeSelect.configure(text='''Node Selector''')
        self.Labelframe_NodeSelect.configure(background="#d9d9d9")
        self.Labelframe_NodeSelect.configure(highlightbackground="#d9d9d9")
        self.Labelframe_NodeSelect.configure(highlightcolor="black")

        self.Scrolledlistbox_NodeSel = ScrolledListBox(self.Labelframe_NodeSelect)
        self.Scrolledlistbox_NodeSel.place(relx=0.013, rely=0.19, relheight=0.705
                , relwidth=0.818, bordermode='ignore')
        self.Scrolledlistbox_NodeSel.configure(background="white")
        self.Scrolledlistbox_NodeSel.configure(font="TkFixedFont")
        self.Scrolledlistbox_NodeSel.configure(foreground="black")
        self.Scrolledlistbox_NodeSel.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox_NodeSel.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox_NodeSel.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox_NodeSel.configure(selectforeground="black")
        for itr in self.server.pod.nodeselector:
            item = self.server.pod.nodeselector[itr]
            self.Scrolledlistbox_NodeSel.insert('end', "{0}: {1}".format(itr, item))

        self.TButton_Add_NS = ttk.Button(self.Labelframe_NodeSelect)
        self.TButton_Add_NS.place(relx=0.855, rely=0.286, height=24, width=97
                , bordermode='ignore')
        self.TButton_Add_NS.configure(command=lambda: self.add_ns())
        self.TButton_Add_NS.configure(takefocus="")
        self.TButton_Add_NS.configure(text='''Add Label''')

        self.TButton_Del_NS = ttk.Button(top)
        self.TButton_Del_NS.place(relx=0.827, rely=0.619, height=24, width=97)
        self.TButton_Del_NS.configure(command=lambda: self.del_ns())
        self.TButton_Del_NS.configure(takefocus="")
        self.TButton_Del_NS.configure(text='''Del Label''')

        self.Labelframe_VolMount = tk.LabelFrame(top)
        self.Labelframe_VolMount.place(relx=0.013, rely=0.698, relheight=0.151
                , relwidth=0.952)
        self.Labelframe_VolMount.configure(relief='groove')
        self.Labelframe_VolMount.configure(foreground="black")
        self.Labelframe_VolMount.configure(text='''Volume Mounts''')
        self.Labelframe_VolMount.configure(background="#d9d9d9")

        self.Label_VM_default = tk.Label(self.Labelframe_VolMount)
        self.Label_VM_default.place(relx=0.013, rely=0.158, height=22, width=91
                , bordermode='ignore')
        self.Label_VM_default.configure(anchor='w')
        self.Label_VM_default.configure(background="#d9d9d9")
        self.Label_VM_default.configure(foreground="#000000")
        self.Label_VM_default.configure(text='''default''')

        self.Label_VM_index = tk.Label(self.Labelframe_VolMount)
        self.Label_VM_index.place(relx=0.013, rely=0.684, height=22, width=71
                , bordermode='ignore')
        self.Label_VM_index.configure(activebackground="#f9f9f9")
        self.Label_VM_index.configure(activeforeground="black")
        self.Label_VM_index.configure(anchor='w')
        self.Label_VM_index.configure(background="#d9d9d9")
        self.Label_VM_index.configure(foreground="#000000")
        self.Label_VM_index.configure(highlightbackground="#d9d9d9")
        self.Label_VM_index.configure(highlightcolor="black")
        self.Label_VM_index.configure(text='''index''')

        self.Label_VM_analytics = tk.Label(self.Labelframe_VolMount)
        self.Label_VM_analytics.place(relx=0.441, rely=0.158, height=22, width=91
                , bordermode='ignore')
        self.Label_VM_analytics.configure(activebackground="#f9f9f9")
        self.Label_VM_analytics.configure(activeforeground="black")
        self.Label_VM_analytics.configure(anchor='w')
        self.Label_VM_analytics.configure(background="#d9d9d9")
        self.Label_VM_analytics.configure(foreground="#000000")
        self.Label_VM_analytics.configure(highlightbackground="#d9d9d9")
        self.Label_VM_analytics.configure(highlightcolor="black")
        self.Label_VM_analytics.configure(text='''analytics''')

        self.vm_default_cbox = tk.StringVar()
        self.vm_default_cbox.set(self.server.pod.volume_mount['default'])
        self.TCombobox_VM_default = ttk.Combobox(self.Labelframe_VolMount)
        self.TCombobox_VM_default.place(relx=0.118, rely=0.158, relheight=0.284
                , relwidth=0.218, bordermode='ignore')
        self.TCombobox_VM_default.configure(textvariable=self.vm_default_cbox)
        self.TCombobox_VM_default.configure(takefocus="")

        #self.vm_an_cbox_5 = tk.StringVar()
        #self.TComboboxVMa_5 = ttk.Combobox(self.Labelframe_VolMount)
        #self.TComboboxVMa_5.place(relx=0.849, rely=5.895, relheight=0.284
        #        , relwidth=0.218, bordermode='ignore')
        #self.TComboboxVMa_5.configure(textvariable=self.vm_an_cbox_5)
        #self.TComboboxVMa_5.configure(takefocus="")

        self.Label_VM_data = tk.Label(top)
        self.Label_VM_data.place(relx=0.025, rely=0.762, height=22, width=71)
        self.Label_VM_data.configure(activebackground="#f9f9f9")
        self.Label_VM_data.configure(activeforeground="black")
        self.Label_VM_data.configure(anchor='w')
        self.Label_VM_data.configure(background="#d9d9d9")
        self.Label_VM_data.configure(foreground="#000000")
        self.Label_VM_data.configure(highlightbackground="#d9d9d9")
        self.Label_VM_data.configure(highlightcolor="black")
        self.Label_VM_data.configure(text='''data''')

        self.vm_data_cbox = tk.StringVar()
        self.vm_data_cbox.set(self.server.pod.volume_mount['data'])
        self.TCombobox_VM_data = ttk.Combobox(top)
        self.TCombobox_VM_data.place(relx=0.125, rely=0.762, relheight=0.043
                , relwidth=0.208)
        self.TCombobox_VM_data.configure(textvariable=self.vm_data_cbox)
        self.TCombobox_VM_data.configure(takefocus="")

        self.vm_idx_cbox = tk.StringVar()
        self.vm_idx_cbox.set(self.server.pod.volume_mount['index'])
        self.TCombobox_VM_idx = ttk.Combobox(top)
        self.TCombobox_VM_idx.place(relx=0.125, rely=0.802, relheight=0.043
                , relwidth=0.208)
        self.TCombobox_VM_idx.configure(textvariable=self.vm_idx_cbox)
        self.TCombobox_VM_idx.configure(takefocus="")

        self.vm_an_cbox_1 = tk.StringVar()
        self.vm_an_cbox_1.set(self.server.pod.volume_mount['analytics'][0])
        self.TComboboxVMa_1 = ttk.Combobox(top)
        self.TComboboxVMa_1.place(relx=0.52, rely=0.722, relheight=0.043
                , relwidth=0.208)
        self.TComboboxVMa_1.configure(textvariable=self.vm_an_cbox_1)
        self.TComboboxVMa_1.configure(takefocus="")

        self.vm_an_cbox_2 = tk.StringVar()
        self.vm_an_cbox_2.set(self.server.pod.volume_mount['analytics'][1])
        self.TComboboxVMa_2 = ttk.Combobox(top)
        self.TComboboxVMa_2.place(relx=0.52, rely=0.762, relheight=0.043
                , relwidth=0.208)
        self.TComboboxVMa_2.configure(textvariable=self.vm_an_cbox_2)
        self.TComboboxVMa_2.configure(takefocus="")

        self.vm_an_cbox_3 = tk.StringVar()
        self.vm_an_cbox_3.set(self.server.pod.volume_mount['analytics'][2])
        self.TComboboxVMa_3 = ttk.Combobox(top)
        self.TComboboxVMa_3.place(relx=0.52, rely=0.802, relheight=0.043
                , relwidth=0.208)
        self.TComboboxVMa_3.configure(textvariable=self.vm_an_cbox_3)
        self.TComboboxVMa_3.configure(takefocus="")

        self.vm_an_cbox_4 = tk.StringVar()
        self.vm_an_cbox_4.set(self.server.pod.volume_mount['analytics'][3])
        self.TComboboxVMa_4 = ttk.Combobox(top)
        self.TComboboxVMa_4.place(relx=0.739, rely=0.722, relheight=0.043
                , relwidth=0.208)
        self.TComboboxVMa_4.configure(textvariable=self.vm_an_cbox_4)
        self.TComboboxVMa_4.configure(takefocus="")

        self.vm_an_cbox_5 = tk.StringVar()
        self.vm_an_cbox_5.set(self.server.pod.volume_mount['analytics'][4])
        self.TComboboxVMa_5 = ttk.Combobox(top)
        self.TComboboxVMa_5.place(relx=0.739, rely=0.762, relheight=0.043
                , relwidth=0.208)
        self.TComboboxVMa_5.configure(textvariable=self.vm_an_cbox_5)
        self.TComboboxVMa_5.configure(takefocus="")

        self.vm_an_cbox_6 = tk.StringVar()
        self.vm_an_cbox_6.set(self.server.pod.volume_mount['analytics'][5])
        self.TComboboxVMa_6 = ttk.Combobox(top)
        self.TComboboxVMa_6.place(relx=0.739, rely=0.802, relheight=0.043
                , relwidth=0.208)
        self.TComboboxVMa_6.configure(textvariable=self.vm_an_cbox_6)
        self.TComboboxVMa_6.configure(takefocus="")

        self.Labelframe_Services = tk.LabelFrame(top)
        self.Labelframe_Services.place(relx=0.414, rely=0.016, relheight=0.151
                , relwidth=0.464)
        self.Labelframe_Services.configure(relief='groove')
        self.Labelframe_Services.configure(foreground="black")
        self.Labelframe_Services.configure(text='''Services''')
        self.Labelframe_Services.configure(background="#d9d9d9")

        self.svc_data = tk.StringVar()
        self.svc_data.set(self.server.services['data'])
        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton_Svc_data = ttk.Checkbutton(self.Labelframe_Services)
        self.TCheckbutton_Svc_data.place(relx=0.054, rely=0.316, relwidth=0.173
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_Svc_data.configure(variable=self.svc_data)
        self.TCheckbutton_Svc_data.configure(takefocus="")
        self.TCheckbutton_Svc_data.configure(text='''data''')

        self.svc_index = tk.StringVar()
        self.svc_index.set(self.server.services['index'])
        self.TCheckbutton_Svc_index = ttk.Checkbutton(self.Labelframe_Services)
        self.TCheckbutton_Svc_index.place(relx=0.054, rely=0.526, relwidth=0.173
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_Svc_index.configure(variable=self.svc_index)
        self.TCheckbutton_Svc_index.configure(takefocus="")
        self.TCheckbutton_Svc_index.configure(text='''index''')

        self.svc_query = tk.StringVar()
        self.svc_query.set(self.server.services['query'])
        self.TCheckbutton_Svc_query = ttk.Checkbutton(self.Labelframe_Services)
        self.TCheckbutton_Svc_query.place(relx=0.338, rely=0.316, relwidth=0.2
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_Svc_query.configure(variable=self.svc_query)
        self.TCheckbutton_Svc_query.configure(takefocus="")
        self.TCheckbutton_Svc_query.configure(text='''query''')

        self.svc_search = tk.StringVar()
        self.svc_search.set(self.server.services['search'])
        self.TCheckbutton_Svc_search = ttk.Checkbutton(self.Labelframe_Services)
        self.TCheckbutton_Svc_search.place(relx=0.338, rely=0.526, relwidth=0.2
                , relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_Svc_search.configure(variable=self.svc_search)
        self.TCheckbutton_Svc_search.configure(takefocus="")
        self.TCheckbutton_Svc_search.configure(text='''search''')

        self.svc_eventing = tk.StringVar()
        self.svc_eventing.set(self.server.services['eventing'])
        self.TCheckbutton_Svc_eventing = ttk.Checkbutton(self.Labelframe_Services)
        self.TCheckbutton_Svc_eventing.place(relx=0.649, rely=0.316
                ,relwidth=0.254, relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_Svc_eventing.configure(variable=self.svc_eventing)
        self.TCheckbutton_Svc_eventing.configure(takefocus="")
        self.TCheckbutton_Svc_eventing.configure(text='''eventing''')

        self.svc_analytics = tk.StringVar()
        self.svc_analytics.set(self.server.services['analytics'])
        self.TCheckbutton_Svc_analytics = ttk.Checkbutton(self.Labelframe_Services)
        self.TCheckbutton_Svc_analytics.place(relx=0.649, rely=0.526
                ,relwidth=0.254, relheight=0.0, height=22, bordermode='ignore')
        self.TCheckbutton_Svc_analytics.configure(variable=self.svc_analytics)
        self.TCheckbutton_Svc_analytics.configure(takefocus="")
        self.TCheckbutton_Svc_analytics.configure(text='''analytics''')

        self.TButton_ok = ttk.Button(top)
        self.TButton_ok.place(relx=0.652, rely=0.905, height=24, width=87)
        self.TButton_ok.configure(command=lambda: self.on_server_ok())
        self.TButton_ok.configure(takefocus="")
        self.TButton_ok.configure(text='''OK''')

        self.TButton1_Cancel = ttk.Button(top)
        self.TButton1_Cancel.place(relx=0.815, rely=0.905, height=24, width=87)
        self.TButton1_Cancel.configure(command=lambda: self.on_server_cancel())
        self.TButton1_Cancel.configure(takefocus="")
        self.TButton1_Cancel.configure(text='''Cancel''')

        self.update_vct_list()
        self.update_vct_display()

    def on_server_ok(self):
        self.server.name = self.TEntry_Name.get()
        self.server.size = self.TEntry_Size.get()
        self.server.services['data'] = self.svc_data.get()
        self.server.services['index'] = self.svc_index.get()
        self.server.services['query'] = self.svc_query.get()
        self.server.services['search'] = self.svc_search.get()
        self.server.services['eventing'] = self.svc_eventing.get()
        self.server.services['analytics'] = self.svc_analytics.get()
        self.server.pod.limits['cpu'] = self.TEntry_Limit_CPU.get()
        self.server.pod.limits['memory'] = self.TEntry_Limit_Mem.get()
        self.server.pod.limits['memory_size'] = self.lim_mem_cbox.get()
        self.server.pod.limits['storage'] = self.TEntry_Limit_Storage.get()
        self.server.pod.limits['storage_size'] = self.lim_store_cbox.get()
        self.server.pod.requests['cpu'] = self.TEntry_Req_CPU.get()
        self.server.pod.requests['memory'] = self.TEntry_Req_Mem.get()
        self.server.pod.requests['memory_size'] = self.req_mem_cbox.get()
        self.server.pod.requests['storage'] = self.TEntry_Req_Storage.get()
        self.server.pod.requests['storage_size'] = self.req_store_cbox.get()
        self.server.pod.volume_mount['default'] = self.vm_default_cbox.get()
        self.server.pod.volume_mount['data'] = self.vm_data_cbox.get()
        self.server.pod.volume_mount['index'] = self.vm_idx_cbox.get()
        self.server.pod.volume_mount['analytics'][0] = self.vm_an_cbox_1.get()
        self.server.pod.volume_mount['analytics'][1] = self.vm_an_cbox_2.get()
        self.server.pod.volume_mount['analytics'][2] = self.vm_an_cbox_3.get()
        self.server.pod.volume_mount['analytics'][3] = self.vm_an_cbox_4.get()
        self.server.pod.volume_mount['analytics'][4] = self.vm_an_cbox_5.get()
        self.server.pod.volume_mount['analytics'][5] = self.vm_an_cbox_6.get()

        self.cleanup()

    def on_server_cancel(self):
        self.server = None
        self.cleanup()

    def cleanup(self):
        self.top.destroy()

    def show(self):
        self.top.wait_window()
        return self.server

    def update_vct_display(self):
        self.Scrolledlistbox_VCT.delete(0, 'end')
        for itr in self.cbcluster_config.vct:
            item = self.cbcluster_config.vct[itr]
            self.Scrolledlistbox_VCT.insert('end', "Name: {0}; Size: {1}{2}; Storage Class: {3}".format(
                item.name, item.size, item.size_type, item.storage_class
            ))

    def on_vct_add(self):
        #print("on vct add")
        vct(self.top, self.cbcluster_config, cloud.get_storage_class(), None).show()
        self.update_vct_list()
        self.update_vct_display()

    def on_vct_edit(self):
        try:
            vct_name = self.Scrolledlistbox_VCT.get(self.Scrolledlistbox_VCT.curselection(),
                                                        self.Scrolledlistbox_VCT.curselection())[0]
            name = vct_name.split(";")[0].split(" ")[1]
            vct(self.top, self.cbcluster_config, cloud.get_storage_class(), self.cbcluster_config.vct[name]).show()
            self.update_vct_list()
            self.update_vct_display()
        except tk.TclError:
            pass

    def on_vct_del(self):
        #print("on vct edit")
        try:
            vct_name = self.Scrolledlistbox_VCT.get(self.Scrolledlistbox_VCT.curselection(),
                                                    self.Scrolledlistbox_VCT.curselection())[0]
            name = vct_name.split(";")[0].split(" ")[1]
            try:
                del self.cbcluster_config.vct[name]
            except KeyError:
                pass

            self.update_vct_list()
            self.update_vct_display()
        except tk.TclError:
            pass

    def update_vct_list(self):
        #print("Entering update_vct_list")
        vct_list = [""]
        for itr in self.cbcluster_config.vct:
            vct_list.append(itr)

        #print(vct_list)
        self.TCombobox_VM_default.configure(values=vct_list)
        self.TComboboxVMa_5.configure(values=vct_list)
        self.TCombobox_VM_data.configure(values=vct_list)
        self.TCombobox_VM_idx.configure(values=vct_list)
        self.TComboboxVMa_1.configure(values=vct_list)
        self.TComboboxVMa_2.configure(values=vct_list)
        self.TComboboxVMa_3.configure(values=vct_list)
        self.TComboboxVMa_4.configure(values=vct_list)
        self.TComboboxVMa_5.configure(values=vct_list)
        self.TComboboxVMa_6.configure(values=vct_list)

    def add_ns(self):
        #print("Self add label method")
        #sys.stdout.flush()
        label = dialog(self.top, "Enter a label in form: <Name>=<Value>").show()
        if label is not None and len(label) > 1:
            label_parts = label.split("=")
            self.server.pod.nodeselector[label_parts[0]] = label_parts[1]
            self.update_node_display()

    def del_ns(self):
        #print("Self add label method")
        #sys.stdout.flush()
        label_name = self.Scrolledlistbox_NodeSel.get(self.Scrolledlistbox_NodeSel.curselection(),
                                                    self.Scrolledlistbox_NodeSel.curselection())[0]
        name = label_name.split(":")[0]
        self.server.pod.del_nodeselector(name)
        self.update_node_display()

    def update_node_display(self):
        self.Scrolledlistbox_NodeSel.delete(0, 'end')
        for itr in self.server.pod.nodeselector:
            item = self.server.pod.nodeselector[itr]
            self.Scrolledlistbox_NodeSel.insert('end', "{0}: {1}".format(itr, item))



# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





